package com.boddi.multidatasource.statement;

import com.boddi.multidatasource.connection.WrapperConnection;
import com.boddi.multidatasource.util.SQLUtil;

import com.boddi.multidatasource.connection.WrapperConnection;
import com.boddi.multidatasource.util.SQLUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public final class WrapperPreparedStatement extends AbstractPreparedStatementAdapter {

    private Integer autoGeneratedKeys;
    
    private int[] columnIndexes;
    
    private String[] columnNames;
    
    private String sql;

    public WrapperPreparedStatement(final WrapperConnection connection, final String sql)
        throws SQLException {
        this(connection, sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public WrapperPreparedStatement(final WrapperConnection connection,
            final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        this(connection, sql, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public WrapperPreparedStatement(final WrapperConnection connection,
            final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability)
        throws SQLException {
        super(connection, resultSetType, resultSetConcurrency, resultSetHoldability);
        this.sql = sql;
    }

    public WrapperPreparedStatement(final WrapperConnection connection, final String sql, final int autoGeneratedKeys)
        throws SQLException {
        this(connection, sql);
        this.autoGeneratedKeys = autoGeneratedKeys;
    }
    
    public WrapperPreparedStatement(final WrapperConnection connection, final String sql, final int[] columnIndexes)
        throws SQLException {
        this(connection, sql);
        this.columnIndexes = columnIndexes;
    }

    public WrapperPreparedStatement(final WrapperConnection connection, final String sql, final String[] columnNames)
        throws SQLException {
        this(connection, sql);
        this.columnNames = columnNames;
    }

    private PreparedStatement generateExecutor() throws SQLException {
        PreparedStatement preparedStatement = (PreparedStatement) getStatement(getWrapperConnection().getConnection(
            SQLUtil.getTypeByStart(sql)), sql);
        replayMethodsInvocation(preparedStatement);
        getParameters().replayMethodsInvocation(preparedStatement);
        return preparedStatement;
    }

    protected BackendStatementWrapper generateStatement(final Connection conn, final String shardingSql) throws SQLException {
        if (null != autoGeneratedKeys) {
            return new BackendPreparedStatementWrapper(conn.prepareStatement(shardingSql, autoGeneratedKeys), shardingSql);
        }
        if (null != columnIndexes) {
            return new BackendPreparedStatementWrapper(conn.prepareStatement(shardingSql, columnIndexes), shardingSql);
        }
        if (null != columnNames) {
            return new BackendPreparedStatementWrapper(conn.prepareStatement(shardingSql, columnNames), shardingSql);
        }
        if (0 != getResultSetHoldability()) {
            return new BackendPreparedStatementWrapper(conn.prepareStatement(shardingSql, getResultSetType(), getResultSetConcurrency(), getResultSetHoldability()), shardingSql);
        }
        return new BackendPreparedStatementWrapper(conn.prepareStatement(shardingSql, getResultSetType(), getResultSetConcurrency()), shardingSql);
    }

    @Override
    public ResultSet executeQuery() throws SQLException {
        ResultSet rs;
        try {
            rs = generateExecutor().executeQuery();
        } finally {
            clearRouteContext();
        }
        setCurrentResultSet(rs);
        return rs;
    }
    
    @Override
    public int executeUpdate() throws SQLException {
        try {
            return generateExecutor().executeUpdate();
        } finally {
            clearRouteContext();
        }
    }
    
    @Override
    public boolean execute() throws SQLException {
        try {
            return generateExecutor().execute();
        } finally {
            clearRouteContext();
        }
    }

    protected void clearRouteContext() throws SQLException {
        resetBatch();
    }

    private void resetBatch() throws SQLException {
        super.clearRouteContext();
        clearParameters();
    }

    @Override
    public void clearBatch() throws SQLException {
        clearRouteContext();
    }

    @Override
    public void addBatch() throws SQLException {
        try {
            generateExecutor().addBatch();
        } finally {
            resetBatch();
        }
    }
    
    @Override
    public int[] executeBatch() throws SQLException {
        try {
            return generateExecutor().executeBatch();
        } finally {
            clearRouteContext();
        }
    }

}
