/*
 * Copyright 1999-2015 dangdang.com.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * </p>
 */

package com.boddi.multidatasource.statement;

import com.boddi.multidatasource.connection.WrapperConnection;
import com.boddi.multidatasource.util.SQLUtil;

import com.boddi.multidatasource.connection.WrapperConnection;
import com.google.common.base.Function;
import com.google.common.collect.Iterators;
import com.google.common.collect.Lists;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;


public class WrapperStatement extends AbstractStatementAdapter {

    private static final Function<BackendStatementWrapper, Statement> TRANSFORM_FUNCTION = new Function<BackendStatementWrapper, Statement>() {
    @Override
    public Statement apply(final BackendStatementWrapper input) {
      return input.getStatement();
    }
    };

    @Getter(AccessLevel.PROTECTED)
    protected final WrapperConnection wrapperConnection;

    @Getter
    private final int resultSetType;

    @Getter
    private final int resultSetConcurrency;

    @Getter
    private final int resultSetHoldability;

    private final List<BackendStatementWrapper> cachedRoutedStatements = Lists.newLinkedList();

    @Setter(AccessLevel.PROTECTED)
    private ResultSet currentResultSet;


    public WrapperStatement(final WrapperConnection wrapperConnection) {
        this(wrapperConnection, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public WrapperStatement(final WrapperConnection wrapperConnection, final int resultSetType, final int resultSetConcurrency) {
        this(wrapperConnection, resultSetType, resultSetConcurrency, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    public WrapperStatement(final WrapperConnection wrapperConnection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) {
        super(Statement.class);
        this.wrapperConnection = wrapperConnection;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.resultSetHoldability = resultSetHoldability;
    }

    @Override
    public Connection getConnection() throws SQLException {
        return wrapperConnection;
    }

    @Override
    public ResultSet executeQuery(final String sql) throws SQLException {
        ResultSet rs = generateExecutor(sql).executeQuery(sql);
        setCurrentResultSet(rs);
        return rs;
    }

    @Override
    public int executeUpdate(final String sql) throws SQLException {
        try {
            return generateExecutor(sql).executeUpdate(sql);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
        try {
            return generateExecutor(sql).executeUpdate(sql, autoGeneratedKeys);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
        try {
            return generateExecutor(sql).executeUpdate(sql, columnIndexes);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
        try {
            return generateExecutor(sql).executeUpdate(sql, columnNames);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public boolean execute(final String sql) throws SQLException {
        try {
            return generateExecutor(sql).execute(sql);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
        try {
            return generateExecutor(sql).execute(sql, autoGeneratedKeys);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
        try {
            return generateExecutor(sql).execute(sql, columnIndexes);
        } finally {
            clearRouteContext();
        }
    }

    @Override
    public boolean execute(final String sql, final String[] columnNames) throws SQLException {
        try {
            return generateExecutor(sql).execute(sql, columnNames);
        } finally {
            clearRouteContext();
        }
    }

    protected void clearRouteContext() throws SQLException {
        setCurrentResultSet(null);
    }

    private Statement generateExecutor(final String sql) throws SQLException {
      Connection connection = wrapperConnection.getConnection(SQLUtil.getTypeByStart(sql));
      return getStatement(connection, sql);
    }

    protected Statement getStatement(final Connection connection, final String sql) throws SQLException {
      BackendStatementWrapper statement = null;
      for (Iterator<BackendStatementWrapper> iterator = cachedRoutedStatements.iterator(); iterator.hasNext();) {
        BackendStatementWrapper each = iterator.next();
        if (each.isBelongTo(connection, sql)) {
          statement = each;
          iterator.remove();
        }
      }
      if (null == statement) {
        statement = generateStatement(connection, sql);
      }
      cachedRoutedStatements.add(statement);
      return statement.getStatement();
    }

    protected BackendStatementWrapper generateStatement(final Connection connection, String sql) throws SQLException {
        Statement result;
        if (0 == resultSetHoldability) {
            result = connection.createStatement(resultSetType, resultSetConcurrency);
        } else {
            result = connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
        }
        return new BackendStatementWrapper(result);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        if (null != currentResultSet) {
            return currentResultSet;
        }
        List<ResultSet> resultSets = new ArrayList<>(getRoutedStatements().size());
        if (getRoutedStatements().size() == 1) {
            currentResultSet = getRoutedStatements().iterator().next().getResultSet();
            return currentResultSet;
        }
        for (Statement each : getRoutedStatements()) {
            resultSets.add(each.getResultSet());
        }
        currentResultSet = resultSets.get(0);
        return currentResultSet;
    }

    @Override
    protected void clearRouteStatements() {
        cachedRoutedStatements.clear();
    }

    @Override
    public Collection<? extends Statement> getRoutedStatements() {
        return  Lists.newArrayList(Iterators.transform(cachedRoutedStatements.iterator(), TRANSFORM_FUNCTION));
    }
}
